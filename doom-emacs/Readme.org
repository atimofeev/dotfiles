#+title: My Doom Emacs config and related notes
#+author: Artem Timofeev
#+property: header-args :tangle ~/.config/doom/config.el

* Table of contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#configel][config.el]]
  - [[#basics][Basics]]
  - [[#custom-misc][Custom misc]]
  - [[#cli-mode][CLI mode]]
  - [[#org-mode][Org-mode]]
- [[#packagesel][packages.el]]
- [[#code-snippets][Code snippets]]
  - [[#centaur-tabs][Centaur-Tabs]]
- [[#notes][Notes]]
  - [[#issues-none][Issues: None]]
  - [[#to-learn-to-do][To learn/ To do]]

* About this config
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the “evil” keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.
This is an .org file which generates all config files with =org-babel-tangle= from code blocks.
Inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][DistroTube configuration]].

* init.el
Init config with selectable modes/modules
#+begin_src emacs-lisp :tangle ~/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +fish)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* config.el
** Basics
Essential basic settings for your Doom setup
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Artem Timofeev")
(setq doom-font (font-spec :family "DejaVuSansM Nerd Font Mono" :size 13 :weight 'semi-light))
(setq doom-theme 'doom-one)
(setq display-line-numbers-type t)
(setq org-directory "~/org/")
#+end_src

** Custom misc
User preferences
#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash")) ;; use bash shell
(setq evil-want-fine-undo t) ;; undo in small steps
;; Multiple cursors VSCode-like behavior; C-g to exit
;; Had to unbind these:
;; gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up "['']"
;; gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down "['']"
(global-set-key (kbd "C-M-<up>") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-<down>") 'mc/mark-next-like-this)
;; Auto update open files which were externally changed
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** CLI mode
Little hacks for Doom in CLI mode
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (xterm-mouse-mode 1) ;; enable mouse
  (setq mouse-drag-copy-region t) ;; mouse select-to-copy
)
#+end_src

** Org-mode
Org mode specific settings
#+begin_src emacs-lisp
(setq org-support-shift-select t)
;;(setq org-startup-with-inline-images t) ;; Render images (only GUI mode)
(setq company-global-modes '(not text-mode org-mode)) ;; Disable autocomplete for regular typing
(setq org-blank-before-new-entry (quote ((heading . nil) ;; Disable newlines before new list entries
                                         (plain-list-item . nil))))
(setq org-log-done 'time) ;; Insert timestamp on TODO completion
;;(setq org-log-done 'note) ;; Insert note with timestamp on TODO completion
(add-hook! 'org-mode-hook
  (org-autolist-mode)) ;; autolist
(add-hook! 'after-save-hook
  (org-babel-tangle)) ;; generate config file from .org on save
#+end_src

* packages.el
Additional packages from emacs repos
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! org-autolist)
#+end_src

* Code snippets
** Centaur-Tabs
To be enabled after fix is found..
- ui :: tabs
*** Doom keymap
#+begin_src emacs-lisp :tangle no
;; Tabs keybinds
(map! :leader
      "<left>" #'centaur-tabs-backward
      "<right>" #'centaur-tabs-forward
      "<up>" #'centaur-tabs-forward-group
      "<down>" #'centaur-tabs-backward-group)
#+end_src

*** Hide tabs menu if 1 tab
https://github.com/ema2159/centaur-tabs/issues/52
#+begin_src emacs-lisp :tangle no
(use-package shut-up)

;; it is possible that 0 is returned which can be ignored
(defun centaur-tabs-get-total-tab-length ()
  (length (centaur-tabs-tabs (centaur-tabs-current-tabset))))

(defun centaur-tabs-hide-on-window-change ()
  ;; run-at-time is required so the tab length is correct on killing a buffer
  ;; without it, it still returns the old value
  (run-at-time nil nil
               (lambda ()
                 (centaur-tabs-hide-check (centaur-tabs-get-total-tab-length)))))

(defun centaur-tabs-hide-check (len)
  (shut-up
    (cond
     ((and (= len 1) (not (centaur-tabs-local-mode))) (call-interactively #'centaur-tabs-local-mode))
     ((and (>= len 2) (centaur-tabs-local-mode)) (call-interactively #'centaur-tabs-local-mode)))))

(use-package centaur-tabs
  :config
  (centaur-tabs-mode t)
  (add-hook 'window-configuration-change-hook 'centaur-tabs-hide-on-window-change))
#+end_src

*** TODO FIXME 'Create new tab' opens tab in new group
Actual for both =centaur-tabs--create-new-tab= and =centaur-tabs--create-new-empty-buffer=

* Notes
** Issues: None
** To learn/ To do
- Learn and configure integrated terminal
- ^ Same with dired -> make it similar to fzf
- Files manipulation: renaming, moving, creation
- GIT
- Window manipulation: scroll through, close
