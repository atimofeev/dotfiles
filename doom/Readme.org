#+title: My Doom Emacs config and related notes
#+author: Artem Timofeev
#+property: header-args :tangle ~/.config/doom/config.el
#+startup: content

* Table of contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#configel][config.el]]
  - [[#general-settings][General settings]]
  - [[#custom-functions][Custom functions]]
  - [[#buffers][Buffers]]
  - [[#doom-modeline][doom-modeline]]
  - [[#elfeed][elfeed]]
  - [[#emacs-tty][emacs TTY]]
  - [[#evil][evil]]
  - [[#expand-region][expand-region]]
  - [[#highlight-indent-guides][highlight-indent-guides]]
  - [[#imenu-list][imenu-list]]
  - [[#lsp][lsp]]
  - [[#org-mode][org-mode]]
  - [[#treemacs][treemacs]]
  - [[#windows][Windows]]
- [[#packagesel][packages.el]]
- [[#notes][Notes]]
  - [[#tasks][Tasks]]
  - [[#issues][Issues]]
  - [[#code-to-implement][Code to implement]]
  - [[#useful-links][Useful links]]

* About this config
:about:
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the “evil” keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.

This file also includes keymaps help, current tasks related to my journey of learning Emacs, issues with usage and further plans.

This is an =.org= file which generates app configuration with =org-babel-tangle= from code blocks.
Inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][DistroTube configuration]].
:end:
See [[file:keybinds.org][Keybind Help]] for useful and mostly default keybinds in Doom Emacs.
* init.el
:PROPERTIES:
:HTML_CONTAINER_CLASS:    hsCollapsed
:END:
Init config with selectable modules
:init_el_src:
#+begin_src elisp :tangle ~/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico            ; the search engine of the future
        +icons)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji              ; 🙂
        +unicode)          ; include unicode emojis
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides       ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup              ; tame sudden yet inevitable temporary windows
        +defaults)         ; reasonable popup rules for buffers
       ;;tabs              ; a tab bar for Emacs
       (treemacs           ; a project drawer, like neotree but cooler
        +lsp)              ; lsp integration for errors, symbols, refs, etc
       unicode             ; extended unicode support for various languages
       (vc-gutter          ; vcs diff in the fringe
        +pretty)
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil               ; come to the dark side, we have cookies
        +everywhere)
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired              ; making dired pretty [functional]
        +icons)
       electric            ; smarter, keyword-based electric-indent
       (ibuffer            ; interactive buffer management
        +icons)
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       (docker
        +lsp)
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval               ; run code, run (also, repls)
        +overlay)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp                ; M-x vscode
        +peek)             ; use lsp-ui-peek for definitions and refs
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform           ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter         ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json               ; At least it ain't XML
        +lsp
        +tree-sitter)
       ;;java              ; the poster child for carpal tunnel syndrome
       (javascript         ; all(hope(abandon(ye(who(enter(here))))))
        +lsp
        +tree-sitter)
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex              ; writing papers in Emacs has never been so fun
        +lsp)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua                ; one-based indices? one-based indices
        +lsp
        +tree-sitter)
       (markdown           ; writing docs for people to ignore
        +grip)             ; github-style MD and org preview
       ;;nim               ; python + lisp at the speed of c
       (nix                ; I hereby declare "nix geht mehr!"
        +tree-sitter)
       ;;ocaml             ; an objective camel
       (org                ; organize your plain life in plain text
        ;+pretty           ; unicode bullets and lists; too expensive..
        +roam2)
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python             ; beautiful is better than ugly
        +lsp
        +tree-sitter)
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh                 ; she sells {ba,z,fi}sh shells on the C xor
        +fish              ; support fish shell syntax
        +lsp
        +tree-sitter
        +powershell)
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       (yaml               ; JSON, but readable
        +lsp
        +tree-sitter)
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       rss                 ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default
        +bindings
        +smartparens)
       )
#+end_src
:end:
* config.el
** General settings
Main or uncategorized settings
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; == GENERAL SETTINGS ==
(setq
 user-full-name "Artem Timofeev"
 doom-font (font-spec :family "DejaVuSansM Nerd Font Mono" :size 15 :weight 'semi-light)
 doom-theme 'doom-one
 display-line-numbers-type t                                     ; show line numbers
 mouse-drag-copy-region t                                        ; select-to-copy with mouse
 confirm-kill-emacs nil                                          ; quit without prompt
 company-global-modes '(not text-mode org-mode markdown-mode)    ; disable autocomplete for plain text
 scroll-margin 3                                                 ; add margin to cursor while scrolling
 projectile-project-search-path '("~/repos/")                    ;
 global-auto-revert-non-file-buffers t                           ; auto-update non-file buffers (e.g. Dired)
)
(global-auto-revert-mode 1)                                      ; auto-update changed files
(beacon-mode 1)                                                  ; cursor highlight on big movements or between windows

(global-set-key (kbd "C-M-<up>")   'mc/mark-previous-like-this)  ; spawn additional cursor above; C-g to exit
(global-set-key (kbd "C-M-<down>") 'mc/mark-next-like-this)      ; spawn additional cursor below
(unbind-key "<insertchar>" overwrite-mode)                       ; disable overwrite mode on Insert key
(map! :leader
      (:prefix ("t". "toggle")
       :desc "vterm popup"              "s"     #'+vterm/toggle  ; open shell popup
       :desc "vterm window"             "S"     #'+vterm/here    ; open shell in current window
       ))
#+end_src

** Custom functions
#+begin_src elisp
;;; == CUSTOM FUNCTIONS ==
#+end_src

*** evil-ex-cmd
These commands go after =:=
#+begin_src elisp
(evil-define-command custom/write-and-sync (file &optional bang)
  "Write the current buffer and then execute doom sync."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (doom/reload))

(evil-define-command custom/write-and-quit (file &optional bang)
  "Write the current buffer and then kill buffer."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (kill-current-buffer))

(evil-define-command custom/kill-buffer (&optional bang)
  "Kill buffer. With bang '!' - kill without prompt."
  :repeat nil
  (interactive "<!>")
  (if bang
      (progn
        (set-buffer-modified-p nil)))
  (kill-current-buffer))
#+end_src

*** Smarter backward-kill-word
#+begin_src elisp
(defun aborn/backward-kill-word ()
  "Customize/Smart backward-kill-word."
  (interactive)
  (let* ((cp (point))
         (backword)
         (end)
         (space-pos)
         (backword-char (if (bobp)
                            ""           ;; cursor in begin of buffer
                          (buffer-substring cp (- cp 1)))))
    (if (equal (length backword-char) (string-width backword-char))
        (progn
          (save-excursion
            (setq backword (buffer-substring (point) (progn (forward-word -1) (point)))))
          (setq ab/debug backword)
          (save-excursion
            (when (and backword          ;; when backword contains space
                       (s-contains? " " backword))
              (setq space-pos (ignore-errors (search-backward " ")))))
          (save-excursion
            (let* ((pos (ignore-errors (search-backward-regexp "\n")))
                   (substr (when pos (buffer-substring pos cp))))
              (when (or (and substr (s-blank? (s-trim substr)))
                        (s-contains? "\n" backword))
                (setq end pos))))
          (if end
              (kill-region cp end)
            (if space-pos
                (kill-region cp space-pos)
              (backward-kill-word 1))))
      (kill-region cp (- cp 1)))         ;; word is non-english word
    ))
#+end_src

*** Auto-tab-align comments
#+begin_src elisp
(defun custom/align-comments (beginning end)
  "Align comments within marked region.
Comment syntax detection is automatic"
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)" (regexp-quote comment-start))))
#+end_src

** Buffers
#+begin_src elisp
;;; == BUFFER KEYMAPS ==
(map! :leader
      (:prefix ("b". "buffer")
       :desc "New buffer"         "n"       #'evil-buffer-new
       :desc "Save buffer"        "s"       #'save-buffer
       :desc "Switch buffer"      "b"       #'consult-buffer
       :desc "Next buffer"        "<right>" #'next-buffer
       :desc "Previous buffer"    "<left>"  #'previous-buffer
       :desc "Kill buffer"        "d"       #'kill-current-buffer
       :desc "Kill other buffers" "k"       #'doom/kill-other-buffers
       :desc "Kill all buffers"   "K"       #'doom/kill-all-buffers))
#+end_src

** doom-modeline
Status bar module
#+begin_src elisp
;;; == DOOM-MODELINE ==
(use-package! doom-modeline
  :config
  (display-time-mode 1)        ; show time in modeline
  :custom
  (display-time-24hr-format t) ; show time in 24h format
  ;; disable modal icons and set custom evil-state tags to make them more noticeable
  (doom-modeline-modal-icon nil)
  (evil-normal-state-tag   (propertize "[Normal]"))
  (evil-emacs-state-tag    (propertize "[Emacs]" ))
  (evil-insert-state-tag   (propertize "[Insert]"))
  (evil-motion-state-tag   (propertize "[Motion]"))
  (evil-visual-state-tag   (propertize "[Visual]"))
  (evil-operator-state-tag (propertize "[Operator]"))
  )

;; setting up custom FG/BG colors to further increace visibility of evil-state
(defun setup-doom-modeline-evil-states ()
  (set-face-attribute 'doom-modeline-evil-normal-state   nil :background "lawngreen" :foreground "black")
  (set-face-attribute 'doom-modeline-evil-emacs-state    nil :background "orange"    :foreground "black")
  (set-face-attribute 'doom-modeline-evil-insert-state   nil :background "red2"      :foreground "white")
  (set-face-attribute 'doom-modeline-evil-motion-state   nil :background "blue"      :foreground "white")
  (set-face-attribute 'doom-modeline-evil-visual-state   nil :background "gray80"    :foreground "black")
  (set-face-attribute 'doom-modeline-evil-operator-state nil :background "blueviolet"))
(add-hook 'doom-modeline-mode-hook 'setup-doom-modeline-evil-states)
#+end_src
** elfeed
Module to read RSS feeds
#+begin_src elisp
;;; == ELFEED ==
(setq elfeed-goodies/entry-pane-size 0.5)
(setq elfeed-feeds  '(("https://www.reddit.com/r/linux.rss" reddit linux)
                     ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                     ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                     ("https://hackaday.com/blog/feed/" hackaday linux)
                     ("https://opensource.com/feed" opensource linux)
                     ("https://linux.softpedia.com/backend.xml" softpedia linux)
                     ("https://itsfoss.com/feed/" itsfoss linux)
                     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                     ("https://www.phoronix.com/rss.php" phoronix linux)
                     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                     ("https://www.computerworld.com/index.rss" computerworld linux)
                     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                     ("https://betanews.com/feed" betanews linux)
                     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                     ("http://highscalability.com/blog/rss.xml" highscal sysdes)
                     ("https://blog.acolyer.org/feed/" mornpaper sysdes)
                     ("https://www.infoq.com/architecture-design/rss" infoq sysdes)
                     ("https://dzone.com/devops-tutorials-tools-news/list.rss" dzone devops)
                     ("https://devops.com/feed/" devops)
                     ("https://thenewstack.io/feed/" newstack devops)
                     ("http://feeds.arstechnica.com/arstechnica/index" arstech tech)
                     ("https://techcrunch.com/feed/" techcrunch tech)))
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
#+end_src

** emacs TTY
Various hacks to make Emacs usable in TTY
#+begin_src elisp
;;; == EMACS TTY ==
(unless (display-graphic-p)
  (xterm-mouse-mode 1)                               ; enable mouse in TTY mode
  (setq lsp-headerline-breadcrumb-icons-enable nil)  ; these icons are PNG
;;  (map! :after evil-org                            ; TTY resolves 'C-backspace' into 'C-h'
;;        :map evil-org-mode-map                     ; if your terminal does not support it
;;        :i "C-h" nil)                              ; enable these lines for hack. define-key too ↴
;;  (define-key evil-insert-state-map (kbd "C-h") 'aborn/backward-kill-word)
)
#+end_src

** evil
Evil mode and general movement
#+begin_src elisp
;;; == EVIL MODE ==
;(define-key evil-motion-state-map ";" #'evil-ex)                                    ; swap : and ;
;(define-key evil-motion-state-map ":" #'evil-snipe-repeat)
(setq evil-want-fine-undo t)                                                         ; undo in small steps
(global-set-key          (kbd "C-<backspace>")     'aborn/backward-kill-word)        ; smarter C-backspace
(define-key evil-ex-completion-map (kbd "C-v")     'evil-paste-after)                ; C-v to paste
(define-key evil-ex-search-keymap  (kbd "C-v")     'evil-paste-after)
(define-key evil-normal-state-map  (kbd "C-v")     'evil-paste-after)
(define-key evil-insert-state-map  (kbd "C-v")     'yank)
(define-key evil-emacs-state-map   (kbd "C-v")     'evil-paste-after)
(define-key global-map             [home]          'mwim-beginning-of-code-or-line)  ; go to line beginning or to identation
(define-key evil-motion-state-map  [home]          'mwim-beginning-of-code-or-line)
(define-key global-map             [end]           'mwim-end)                        ; go to end of code or end of line
(define-key evil-motion-state-map  [end]           'mwim-end)
(global-set-key                    (kbd "<prior>") 'evil-scroll-up)                  ; rebind PgUp/PgDn to evil scroll functions
(global-set-key                    (kbd "<next>")  'evil-scroll-down)

;; these commands go after ':' (evil-ex)
(evil-ex-define-cmd "W"  'evil-write)                                      ; write with sticky shift
(evil-ex-define-cmd "ww" 'custom/write-and-sync)                           ; write file and perform 'doom sync'
(evil-ex-define-cmd "wq" 'custom/write-and-quit)                           ; write file and kill buffer
(evil-ex-define-cmd "q"  'custom/kill-buffer)                              ; kill buffer instead of killing emacs; :q! - kill without prompt
#+end_src

TODO:
#+begin_src elisp :tangle no
;(define-key evil-normal-state-map (kbd "DEL") 'evil-insert) ; Backspace -> insert mode
;(define-key evil-normal-state-map (kbd "C-w") 'evil-insert) ; C-Backspace -> insert mode
; enter -> insert mode?
; ; -> insert mode?
; <deletechar> -> insert mode?
#+end_src

** expand-region
Extension to increase selected region by semantic units
Todo: figure out working and convenient keybind
#+begin_src elisp :tangle no
(map! "C-=" #'er/expand-region
      "C--" #'er/contract-region)
#+end_src

** highlight-indent-guides
#+begin_src elisp
(use-package! highlight-indent-guides
  :defer t
  :custom
  (highlight-indent-guides-auto-odd-face-perc 0)
  (highlight-indent-guides-auto-even-face-perc 0)
  :config
  (highlight-indent-guides-auto-set-faces) ; FIXME indent glitches (not working)
  )
#+end_src
** imenu-list
Module to show file definitions or headings
#+begin_src elisp
;;; == IMENU-LIST ==
(use-package! imenu-list
  :defer t
  :config
  (setq
   imenu-list-focus-after-activation t    ; window auto-focus
   imenu-list-auto-resize t               ; windown auto-size (is it working?)
   imenu-auto-rescan t                    ; auto-refresh
   imenu-auto-rescan-maxout (* 1024 1024) ; limit auto-refresh to max filesize
   )
)
(map! :leader :desc "imenu-list" "t i" #'imenu-list-smart-toggle)
#+end_src

** lsp
#+begin_src elisp
;;; == LSP ==
(use-package! lsp-mode
  :defer t
  :custom
  (lsp-headerline-breadcrumb-enable t)     ; enable headerline breadcrumb
  (gc-cons-threshold (* 400 1024 1024))    ; increase GC threshold to improve perf in LSP mode
  (read-process-output-max (* 1 1024 1024))  ; handle large LSP responses
  )
(use-package! lsp-treemacs
  :after lsp-mode  ;; and treemacs
  :config (lsp-treemacs-sync-mode 1))
#+end_src

** org-mode
- .org :: Highly flexible structured plain text file format
#+begin_src elisp
;;; == ORG-MODE ==
(use-package! org
  :defer t
  :custom
  (org-directory "~/org")                                     ; org-agenda and other org tools will work upon this dir
  (org-support-shift-select t)                                ; enable select with S-<arrows>
  (org-startup-folded "content")                              ; startup with everything unfolded except lowest sub-sections
  :config
  (set-popup-rule! "^\\*Org Src" :ignore t)                   ; delete popup rule for src-edit buffer
  :hook                                                       ; ^ makes popup on side instead of bottom
  (after-save . org-babel-tangle)                             ; export org code blocks on save
  (org-src-mode . evil-insert-state)                          ; enter code block editing with insert mode
  (org-mode . (lambda ()
    (display-line-numbers-mode 0)                             ; disable lines numbers for org-mode
    (highlight-regexp ":tangle no" 'error)                    ; highlight :tangle no
    (map! :leader "TAB" #'org-fold-show-subtree)              ; unfold subsections on SPC-TAB
    (sp-local-pair 'org-mode "=" "=" :actions '(insert wrap)) ; auto-pair = and ~
    (sp-local-pair 'org-mode "~" "~" :actions '(insert wrap))
    ))
  )
#+end_src

- org-roam :: plain-text knowledge management system
#+begin_src elisp
;;; == ORG-ROAM ==
(use-package! org-roam
  :defer t
  :config
  (setq org-roam-directory org-directory ; org-dir = org-roam-dir
        org-roam-index-file (concat org-directory "README.org") ; org-roam main file
        ;org-template-dir (concat org-directory "templates/") ; templates dir for org-roam nodes
        org-roam-capture-templates
        '(("d" "default-uncat" plain "* Overview\n%?"
           :target (file+head "uncat/${slug}.org" "#+title: ${title}\n#+filetags: uncat\n")
           :unnarrowed t)
          ("t" "tech" plain "* Overview\n%?\n* Main section\n\n* Postscript\n"
           :target (file+head "tech/${slug}.org" "#+title: ${title}\n#+filetags: tech\n")
           :unnarrowed t)
          ("s" "stash" plain "* Overview\n%?"
           :target (file+head "stash/${slug}.org" "#+title: ${title}\n#+filetags: stash\n")
           :unnarrowed t)
          ("m" "money" plain "* Overview\n%?"
           :target (file+head "money/${slug}.org" "#+title: ${title}\n#+filetags: money\n")
           :unnarrowed t)
          ("w" "work" plain "* Overview\n%?"
           :target (file+head "work/${slug}.org" "#+title: ${title}\n#+filetags: work\n")
           :unnarrowed t)
          ("h" "health" plain "* Overview\n%?"
           :target (file+head "health/${slug}.org" "#+title: ${title}\n#+filetags: health\n")
           :unnarrowed t)
          ("l" "leisure" plain "* Overview\n%?"
           :target (file+head "leisure/${slug}.org" "#+title: ${title}\n#+filetags: leisure\n")
           :unnarrowed t)
          )
        )
  )
(use-package! org-roam-timestamps
  :after org-roam
  :config (org-roam-timestamps-mode 1))
(map! :leader :desc "org-roam backlinks" "t o" #'org-roam-buffer-toggle)
#+end_src

- org-roam-ui :: interactive web UI for =org-roam=
#+begin_src elisp
(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** treemacs
Module for displaying project file tree
#+begin_src elisp
;;; == TREEMACS ==
(use-package! treemacs
  :defer t
  :config
  (setq treemacs-width 28)         ; adjust window width
  (treemacs-follow-mode 1)         ; follow files
  (treemacs-project-follow-mode 1) ; follow projects
)
(map! :leader :desc "treemacs" "t t" #'treemacs)
#+end_src

** Windows
#+begin_src elisp
;;; == EVIL-WINDOWS KEYMAPS ==
(map! :leader
      (:prefix ("w". "window")
       :desc "New window, up"           "n"             #'evil-window-new
       :desc "New window, left"         "N"             #'evil-window-vnew

       :desc "Split view, right"        "s"             #'evil-window-split
       :desc "Split view, down"         "v"             #'evil-window-vsplit
       ;; uses same buffer

       :desc "Select LEFT window"       "<left>"        #'evil-window-left
       :desc "Select DOWN window"       "<down>"        #'evil-window-down
       :desc "Select UP window"         "<up>"          #'evil-window-up
       :desc "Select RIGHT window"      "<right>"       #'evil-window-right

       :desc "Move window LEFT"         "S-<left>"      #'+evil/window-move-left
       :desc "Move window DOWN"         "S-<down>"      #'+evil/window-move-down
       :desc "Move window UP"           "S-<up>"        #'+evil/window-move-up
       :desc "Move window RIGHT"        "S-<right>"     #'+evil/window-move-right

       :desc "Maximize window"          "m m"           #'doom/window-maximize-buffer
       ;; close all other windows
       :desc "Maximize vertically"      "m v"           #'doom/window-maximize-vertically
       ;; close all windows UP/DOWN
       :desc "Maximize horizontally"    "m s"           #'doom/window-maximize-horizontally
       ;; close all windown LEFT/RIGHT

       :desc "Close window"             "c"             #'evil-window-delete
       :desc "Kill buffer & window"     "d"             #'kill-buffer-and-window))
#+end_src

* packages.el
Additional packages from emacs repos
#+begin_src elisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! beacon)              ; cursor highlighting
(package! imenu-list)          ; listing of file structure
(package! mwim)                ; ident/comment-aware cursor movements with <home>/<end>
(package! org-roam-timestamps) ; +c/mtime to PROPERTIES drawer in org-roam file
(package! org-roam-ui)         ; web ui for org-roam
(package! expand-region)       ; increase selected region by semantic units
(unpin! lsp-treemacs)          ; fix lsp-headerline-breadcrumb icons (???why)
#+end_src

* Notes
** Tasks
*** general tasks
- Enter at the end of line in visual mode -> insert mode -> actual EOL - > RET
    Probably with =evil-insert-state-hook= followed by =evil-end-of-line= cmd.
- Looks into modules loading, lazify ones which always load without particular need
- EOF margin: should not show more than X empty lines when going to end of file
- fzf+grep-like functionality
- Try out different indent guides ~highlight-indent-guides-method~
    =fill=, =column=, =character= (current) or =bitmap=
- Sort sections in ~config.el~
- Install ~LSP~ for =Terraform=
- Enable and setup [[https://www.emacswiki.org/emacs/SmoothScrolling][smooth scrolling]]
- Figure out formatters for langs
- Exclude some things from =file-name-history=

*** org-mode tasks
- Org unfold sections in insert mode
  - Insert mode: TAB on closed section should open it
- org-scr-mode :: Exit with =:q= or =:w= (if no filename was provided)
- Try to customize =org-fancy-priorities=

*** to disable
- disable =evil-record-macro= =q= and other related commands
- probably bookmarks too?

** Issues
- doom/reload :: Can't use new modules without restart of emacs
- Emojis :: Visual glitches in terminal TTY mode
- RET in middle of org list item :: Invalid function: org-element-with-disabled-cache
- TAB in org code block throwing ::
    [yas] Check your `yas-snippet-dirs': /home/atimofeev/.config/doom/snippets/ is not a directory
    [yas] Preparied just-in-time loading of snippets with some errors.  Check *Messages*.
- highlight-indent-guides :: visual bugs
    https://github.com/doomemacs/doomemacs/issues/2666
- GUI mode :: stuttery scrolling even with =smooth scrolling=

** Code to implement
*** Centaur-Tabs
To be enabled after fix is found..
- ui :: tabs
**** TODO FIXME 'Create new tab'
It opens tab in new group
Actual for both =centaur-tabs--create-new-tab= and =centaur-tabs--create-new-empty-buffer=
Root cause: [[https://github.com/ema2159/centaur-tabs#buffer-groups][buffer groups]] logic

**** Doom keymap
#+begin_src elisp :tangle no
;; Tabs keybinds
(map! :leader
      "<left>" #'centaur-tabs-backward
      "<right>" #'centaur-tabs-forward
      "<up>" #'centaur-tabs-forward-group
      "<down>" #'centaur-tabs-backward-group)
#+end_src

**** Hide tabs menu if 1 tab
https://github.com/ema2159/centaur-tabs/issues/52
#+begin_src elisp :tangle no
(use-package shut-up)

;; it is possible that 0 is returned which can be ignored
(defun centaur-tabs-get-total-tab-length ()
  (length (centaur-tabs-tabs (centaur-tabs-current-tabset))))

(defun centaur-tabs-hide-on-window-change ()
  ;; run-at-time is required so the tab length is correct on killing a buffer
  ;; without it, it still returns the old value
  (run-at-time nil nil
               (lambda ()
                 (centaur-tabs-hide-check (centaur-tabs-get-total-tab-length)))))

(defun centaur-tabs-hide-check (len)
  (shut-up
    (cond
     ((and (= len 1) (not (centaur-tabs-local-mode))) (call-interactively #'centaur-tabs-local-mode))
     ((and (>= len 2) (centaur-tabs-local-mode)) (call-interactively #'centaur-tabs-local-mode)))))

(use-package centaur-tabs
  :config
  (centaur-tabs-mode t)
  (add-hook 'window-configuration-change-hook 'centaur-tabs-hide-on-window-change))
#+end_src

*** Auto indent code block
Run every 10s
#+begin_src elisp :tangle no
(defun indent-org-block-automatically ()
  (when (org-in-src-block-p)
   (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit)))

(run-at-time 1 10 'indent-org-block-automatically)
#+end_src

** Useful links
https://discourse.doomemacs.org/t/how-to-re-bind-keys/56
https://discourse.doomemacs.org/t/common-config-anti-patterns/119
https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org
https://github.com/tecosaur/emacs-config/blob/master/config.org
https://github.com/elken/doom
https://github.com/ztlevi/doom-config
https://dotdoom.rgoswami.me/
https://gitlab.com/manueljlin/emacs-config/
https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
https://github.com/stfl/doom.d/blob/master/config.org
https://emacs.stackexchange.com/questions/19578/list-hooks-that-will-run-after-command
https://stackoverflow.com/questions/34497696/swap-and-to-make-colon-commands-easier-to-type-in-emacs
