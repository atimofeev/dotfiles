#+title: My Doom Emacs config and related notes
#+author: Artem Timofeev
#+property: header-args :tangle ~/.config/doom/config.el
#+startup: content

* Table of contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#configel][config.el]]
  - [[#general-settings][General settings]]
  - [[#org-mode][org-mode]]
  - [[#elfeed][elfeed]]
  - [[#keymaps][Keymaps]]
- [[#packagesel][packages.el]]
- [[#notes][Notes]]
  - [[#keymap-help][Keymap help]]
  - [[#code-to-implement][Code to implement]]
  - [[#issues][Issues]]
  - [[#tasks][Tasks]]

* About this config
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the “evil” keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.

This file also includes keymaps help, current tasks related to my journey of learning Emacs, issues with usage and further plans.

This is an =.org= file which generates app configuration with =org-babel-tangle= from code blocks.
Inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][DistroTube configuration]].

* init.el
Init config with selectable modes/modules
:init_el_src:
#+begin_src emacs-lisp :tangle ~/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)            ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pretty)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +fish)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       rss        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src
:END:
* config.el
** General settings
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; == GENERAL SETTINGS ==
(setq
 user-full-name "Artem Timofeev"
 doom-font (font-spec :family "DejaVuSansM Nerd Font Mono" :size 13 :weight 'semi-light)
 doom-theme 'doom-one
 evil-want-fine-undo t ;; undo in small steps
 display-line-numbers-type t ;; show line numbers
 mouse-drag-copy-region t ;; select-to-copy with mouse
 confirm-kill-emacs nil ;; quit without prompt
 company-global-modes '(not text-mode org-mode markdown-mode) ;; disable autocomplete for plain text
 global-auto-revert-non-file-buffers t ;; auto-update non-file buffers (e.g. file listing)
 scroll-margin 3 ;; add margin to cursor while scrolling
 treemacs-project-follow-mode t ;; treemacs: show currently opened project
 treemacs-width 28 ;; treemacs: adjust default width
 imenu-list-focus-after-activation t ;; imenu-list: window auto-focus
 imenu-list-auto-resize t ;; imenu-list: windown auto-size (is it working?)
 imenu-auto-rescan t ;; imenu-list: auto-refresh
 imenu-auto-rescan-maxout (* 1024 1024) ;; imenu-list: limit auto-refresh to max filesize
;; imenu--rescan-item '("" . -99) ;; imenu-list: removes `rescan' item. not sure if this is needed
)
(unless (display-graphic-p)
  (xterm-mouse-mode 1) ;; enable mouse in CLI mode
)
(beacon-mode 1) ;; cursor highlight on big movements or between windows
(global-auto-revert-mode 1) ;; auto-update changed files
#+end_src

** org-mode
#+begin_src emacs-lisp
;; == ORG-MODE ==
(setq
 org-directory "~/org/" ;; org-agenda and other org tools will work upon this dir
 org-support-shift-select t ;; enable select with S-<arrows>
 org-startup-folded "content" ;; startup with everything unfolded except lowest sub-sections
;; org-startup-with-inline-images t ;; Render images (only GUI mode)
 org-blank-before-new-entry (quote ((heading . nil) ;; no empty lines on betwen new list entries
                                    (plain-list-item .nil)))
)
(add-hook! 'after-save-hook (org-babel-tangle)) ;; export org code blocks on save
(add-hook! 'org-src-mode-hook (evil-insert-state)) ;; enter code block editing with insert state
(add-hook! 'org-mode-hook
  (display-line-numbers-mode 0) ;; disable lines numbers for org-mode
  (org-autolist-mode) ;; autolist
)
#+end_src

** elfeed
#+begin_src emacs-lisp
;; == ELFEED ==
(setq elfeed-goodies/entry-pane-size 0.5)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
(setq elfeed-feeds  '(("https://www.reddit.com/r/linux.rss" reddit linux)
                     ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                     ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                     ("https://hackaday.com/blog/feed/" hackaday linux)
                     ("https://opensource.com/feed" opensource linux)
                     ("https://linux.softpedia.com/backend.xml" softpedia linux)
                     ("https://itsfoss.com/feed/" itsfoss linux)
                     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                     ("https://www.phoronix.com/rss.php" phoronix linux)
                     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                     ("https://www.computerworld.com/index.rss" computerworld linux)
                     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                     ("https://betanews.com/feed" betanews linux)
                     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                     ("http://highscalability.com/blog/rss.xml" highscal sysdes)
                     ("https://blog.acolyer.org/feed/" mornpaper sysdes)
                     ("https://www.infoq.com/architecture-design/rss" infoq sysdes)
                     ("https://dzone.com/devops-tutorials-tools-news/list.rss" dzone devops)
                     ("https://devops.com/feed/" devops)
                     ("https://thenewstack.io/feed/" newstack devops)
                     ("http://feeds.arstechnica.com/arstechnica/index" arstech tech)
                     ("https://techcrunch.com/feed/" techcrunch tech)))
#+end_src

** Keymaps
*** General keybinds
#+begin_src emacs-lisp
;; == GENERAL KEYMAPS ==
;; Multiple cursors VSCode-like behavior; C-g to exit
(global-set-key (kbd "C-M-<up>") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-<down>") 'mc/mark-next-like-this)
(unbind-key "<insertchar>" overwrite-mode) ;; disable overwrite mode on Insert key
(map! :leader
      (:prefix ("t". "toggle")
       :desc "vterm"            "s"     #'+vterm/toggle ;; open shell
       :desc "treemacs"         "t"     #'treemacs ;; open project tree
       :desc "imenu-list"       "i"     #'imenu-list-smart-toggle ;; open file overview
       ))
#+end_src

*** Evil CMDs
These commands go after entering =:=
#+begin_src emacs-lisp
;; == CUSTOM EVIL CMDs AND FUNCTIONS ==
(evil-define-command my-write-and-sync (file &optional bang)
  "Write the current buffer and then execute doom sync."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (doom/reload))
(evil-define-command my-write-and-quit (file &optional bang)
  "Write the current buffer and then execute doom sync."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (kill-current-buffer))
(evil-ex-define-cmd "q" 'kill-current-buffer) ;; kill buffer instead of killing emacs
(evil-ex-define-cmd "ww" 'my-write-and-sync) ;; write file and perform 'doom sync'
(evil-ex-define-cmd "wq" 'my-write-and-quit) ;; write file and kill buffer
#+end_src

*** Files
Disabled: WIP
#+begin_src emacs-lisp :tangle no
;; == FILES KEYMAPS ==
(map! :leader
      (:prefix ("f". "file")
       :desc "New file"                 "n" #'evil-buffer-new
       :desc "New file as.."            " " #'

       :desc "Save file"                "s" #'save-buffer
       :desc "Save file as.."           "S" #'write-file
       :desc "Save file and kill buffer"" " #'

       :desc "Rename file"              " " #'
       :desc "Move file"                " " #'
       :desc "Delete file"              " " #'delete-file))
#+end_src

*** Buffers
#+begin_src emacs-lisp
;; == BUFFER KEYMAPS ==
(map! :leader
      (:prefix ("b". "buffer")
       :desc "New buffer"         "n"       #'evil-buffer-new
       :desc "Save buffer"        "s"       #'save-buffer
       :desc "Switch buffer"      "b"       #'consult-buffer
       :desc "Next buffer"        "<right>" #'next-buffer
       :desc "Previous buffer"    "<left>"  #'previous-buffer
       :desc "Kill buffer"        "d"       #'kill-current-buffer
       :desc "Kill other buffers" "k"       #'doom/kill-other-buffers
       :desc "Kill all buffers"   "K"       #'doom/kill-all-buffers))
#+end_src

*** Windows
#+begin_src emacs-lisp
;; == EVIL-WINDOWS KEYMAPS ==
(map! :leader
      (:prefix ("w". "window")
       :desc "New window, up"           "n"             #'evil-window-new
       :desc "New window, left"         "N"             #'evil-window-vnew

       :desc "Split view, right"        "s"             #'evil-window-split
       :desc "Split view, down"         "v"             #'evil-window-vsplit
       ;; uses same buffer

       :desc "Select LEFT window"       "<left>"        #'evil-window-left
       :desc "Select DOWN window"       "<down>"        #'evil-window-down
       :desc "Select UP window"         "<up>"          #'evil-window-up
       :desc "Select RIGHT window"      "<right>"       #'evil-window-right

       :desc "Move window LEFT"         "S-<left>"      #'+evil/window-move-left
       :desc "Move window DOWN"         "S-<down>"      #'+evil/window-move-down
       :desc "Move window UP"           "S-<up>"        #'+evil/window-move-up
       :desc "Move window RIGHT"        "S-<right>"     #'+evil/window-move-right

       :desc "Maximize window"          "m m"           #'doom/window-maximize-buffer
       ;; close all other windows
       :desc "Maximize vertically"      "m v"           #'doom/window-maximize-vertically
       ;; close all windows UP/DOWN
       :desc "Maximize horizontally"    "m s"           #'doom/window-maximize-horizontally
       ;; close all windown LEFT/RIGHT

       :desc "Close window"             "c"             #'evil-window-delete
       :desc "Kill buffer & window"     "d"             #'kill-buffer-and-window))
#+end_src

*** org-mode FIXME
#+begin_src emacs-lisp :tangle no
;; == ORG-MODE KEYMAPS ==
;; need to find suitable keymap. C-TAB is intercepted by kitty terminal (cycle through tabs)
;; 'org-fold-show-subtree unfolds subtree
;(after! org
;  (define-key org-mode-map (kbd "C-\t") #'org-fold-show-subtree))
;(add-hook! 'org-mode-hook
;  (define-key org-mode-map (kbd "C-TAB") #'org-fold-show-subtree))
#+end_src

* packages.el
Additional packages from emacs repos
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! org-autolist) ;; easier lists in org-mode
(package! beacon) ;; cursor highlighting
(package! imenu-list) ;; listing of file structure
#+end_src

* Notes
** Keymap help
*** Keymap Legend
Explanation on how to read keymap configuration
- SPC :: Space bar, =leader= key by default
- C :: Ctrl
- S :: Shift
- M :: Alt
- RET :: Enter/Return
- TAB :: Tab
- [a-z] :: Regular keyboard keys
- [A-Z] :: Keys passed with Shift
- <up/down/left/right> :: Arrow keys
- N: OR I: OR V: :: Only effective in Normal, Insert or Visual states

*** Finding help & docs
- SPC-h-d-h :: Doom Emacs manual
- SPC-h-d-s :: Search through Doom Emacs manual headers
- M-x org-info :: org-mode manual
- S-k :: Describe function/variable/callable in code
- M-x find-library :: Search through libraries
- M-x describe-key :: Show description for keybind
- M-x describe-variable :: Show variable status
- M-x describe-function :: Show function
- ? :: Search keybinds and related functions

*** Evil (vi)
- gg :: Start of file
- G :: End of file
- u :: Undo
- C-r :: Redo
- d :: Cut (also to clipboard)
- y :: Copy (also to clipboard)
- p :: Paste
- dd :: Delete line
- dw :: Delete word starting from cursor position
- :w :: Write file
- :q :: Exit

*** Text operations
- Mouse select :: Copy to clipboard
- S-<arrows> :: Select text
- M-<arrows> :: Move line (or selected region)
- C-v OR p :: Paste from clipboard (probably terminal KB)

*** org-mode
- N:TAB :: Fold/Unfold section =FOLDED -> CHILDREN=
    To enable =FOLDED -> CHILDREN -> SUBTREE=, add this:
    #+begin_src emacs-lisp :tangle no
(setq org-tab-first-hook (delete '+org-cycle-only-current-subtree-h org-tab-first-hook)) ;; enable all 3 states for `org-cycle'
    #+end_src
- N:S-TAB :: Fold/Unfold all sections =OVERVIEW -> CONTENTS -> SHOW ALL= (excluding :drawers:)
- g j :: Go to next section heading (same level)
- g k :: Go to previous section heading (same level)
- M-<up/down> :: Move section with subsections
- S-M-<up/down> :: Move section
- M-<left/right> OR I:TAB/S-TAB :: Move section (promote/demote)
- S-M-<left/right> :: Move section with subsections (promote/demote)
- C-M-\ :: Format code block
- C-c-' :: Edit code block in new buffer. =C-c-'= to return
- C-m :: Execute code block with results in file
- C-c C-c :: Execute code block with results in window
- dd :: On folded section: delete with children

*** magit
- g g :: Open magit
- s :: stage file
- S :: stage all files
- u :: unstage file
- c c :: commit changes
- C-c C-c :: apply commit
- p :: push menu

*** elfeed
- ? :: Mark as read
- ? :: Select keyword
-  ::

** Code to implement
*** Centaur-Tabs
To be enabled after fix is found..
- ui :: tabs
**** TODO FIXME 'Create new tab'
It opens tab in new group
Actual for both =centaur-tabs--create-new-tab= and =centaur-tabs--create-new-empty-buffer=
Root cause: [[https://github.com/ema2159/centaur-tabs#buffer-groups][buffer groups]] logic

**** Doom keymap
#+begin_src emacs-lisp :tangle no
;; Tabs keybinds
(map! :leader
      "<left>" #'centaur-tabs-backward
      "<right>" #'centaur-tabs-forward
      "<up>" #'centaur-tabs-forward-group
      "<down>" #'centaur-tabs-backward-group)
#+end_src

**** Hide tabs menu if 1 tab
https://github.com/ema2159/centaur-tabs/issues/52
#+begin_src emacs-lisp :tangle no
(use-package shut-up)

;; it is possible that 0 is returned which can be ignored
(defun centaur-tabs-get-total-tab-length ()
  (length (centaur-tabs-tabs (centaur-tabs-current-tabset))))

(defun centaur-tabs-hide-on-window-change ()
  ;; run-at-time is required so the tab length is correct on killing a buffer
  ;; without it, it still returns the old value
  (run-at-time nil nil
               (lambda ()
                 (centaur-tabs-hide-check (centaur-tabs-get-total-tab-length)))))

(defun centaur-tabs-hide-check (len)
  (shut-up
    (cond
     ((and (= len 1) (not (centaur-tabs-local-mode))) (call-interactively #'centaur-tabs-local-mode))
     ((and (>= len 2) (centaur-tabs-local-mode)) (call-interactively #'centaur-tabs-local-mode)))))

(use-package centaur-tabs
  :config
  (centaur-tabs-mode t)
  (add-hook 'window-configuration-change-hook 'centaur-tabs-hide-on-window-change))
#+end_src

*** Auto format code block
Run every 10s
#+begin_src emacs-lisp :tangle no
(defun indent-org-block-automatically ()
  (when (org-in-src-block-p)
   (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit)))

(run-at-time 1 10 'indent-org-block-automatically)
#+end_src
** Issues
- [[#centaur-tabs][Centaur-Tabs]] :: New tab is created in new group instead of same one
- Multiple cursors :: Not working in Org mode. Possibly due to broken shortcuts
- C-Backspace :: Not working in CLI mode, resolves as =C-h=
- Autolist with description lists :: =RET= always creates new list item, no way to exit this mode
- Autolist with unordered lists :: =RET= mid text creates new list item, no text is moved
- TAB in org code block throwing ::
    [yas] Check your `yas-snippet-dirs': /home/atimofeev/.config/doom/snippets/ is not a directory
    [yas] Preparied just-in-time loading of snippets with some errors.  Check *Messages*.
- Keybind leaking :: KB from buffer prefix sometimes are leaking into insert mode without any prefixes
    i.e. typing =d= in insert mode tries to kill buffer
- Emojis :: Visual glitches in terminal TTY mode

** Tasks
*** org-mode tasks
- Org unfold sections in insert mode
  - Insert mode: TAB on closed section should open it
- Exit org code block editing with =:w= if no filename was provided
- Check if code indentations work as expected
- Find out how to automatically =tab-indent= whole code block.
    Not only line starting position, but it's contents too.
- Try to customize =org-fancy-priorities=

*** other tasks
- Try out =prettify-symbols-mode=, at least for org code blocks. [[https://www.reddit.com/r/emacs/comments/o04it0/share_your_prettifysymbolsalist/][reddit link]]
- Enable LSP. [[https://docs.doomemacs.org/v21.12/modules/tools/lsp/][link]]
- Customize [[https://github.com/seagle0128/doom-modeline][doom-modeline]]. At least make bigger =evil-state= markers
    [[https://github.com/SwiftyChicken/dotfiles/tree/master/.config/emacs][Example]] of vanilla config with large indicator. [[https://preview.redd.it/42ts6q6cwuua1.png?width=1920&format=png&auto=webp&s=f852078093fd8d67bcb45ee8cf1cd3d5b9cf84d4][pic]]
- Enter at the end of line in visual mode -> insert mode -> actual EOL - > RET
    Probably with =evil-insert-state-hook= followed by =evil-end-of-line= cmd.
- Looks into modules loading, lazify ones which always load without particular need
- EOF margin: should not show more than X empty lines when going to end of file
- Treemacs: enable =treemacs-filewatch-mode= only when it's open
  - +keybind for adding projects
  - find way to see into orgfiles(?)
- Try out [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e]] email client

*** to disable
- disable =evil-record-macro= =q= and other related commands

*** learn
- Search by keybind
- [[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-06.org][Emacs tabs]]
- [[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-07.org][Emacs tiling WM]]
