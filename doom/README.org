#+title: My Doom Emacs config and related notes
#+author: Artem Timofeev
#+property: header-args :tangle ~/.config/doom/config.el
#+startup: content
* Table of Contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#configel][config.el]]
  - [[#general-settings][General settings]]
  - [[#custom-functions][Custom functions]]
  - [[#buffers][Buffers]]
  - [[#centaur-tabs][centaur-tabs]]
  - [[#dired][dired]]
  - [[#doom-modeline][doom-modeline]]
  - [[#elfeed][elfeed]]
  - [[#emacs-tty][emacs TTY]]
  - [[#evil][evil]]
  - [[#expand-region][expand-region]]
  - [[#flycheck][flycheck]]
  - [[#gptel][gptel]]
  - [[#imenu-list][imenu-list]]
  - [[#indent-bars][indent-bars]]
  - [[#kubel][kubel]]
  - [[#lsp][lsp]]
  - [[#org-mode][org-mode]]
  - [[#prog-mode][prog-mode]]
  - [[#recenter][recenter]]
  - [[#treemacs][treemacs]]
  - [[#vterm][vterm]]
  - [[#windows][Windows]]
  - [[#whiteroom-mode][Whiteroom-mode]]
- [[#packagesel][packages.el]]
- [[#notes][Notes]]
  - [[#tasks][Tasks]]
  - [[#issues][Issues]]
  - [[#code-to-implement][Code to implement]]
  - [[#useful-links][Useful links]]

* About this config
:about:
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the “evil” keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.

This file also includes keymaps help, current tasks related to my journey of learning Emacs, issues with usage and further plans.

This is an =.org= file which generates app configuration with =org-babel-tangle= from code blocks.
Inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][DistroTube configuration]].
:end:
See [[file:keybinds.org][Keybind Help]] for useful and mostly default keybinds in Doom Emacs.

Also, [[file:dependencies.org][dependencies]] for a list of required external software.

* init.el
Init config with selectable modules

See [[file:files/init.el][init.el]].

* config.el
** General settings
Main or uncategorized settings
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; == GENERAL SETTINGS ==
(setq
 user-full-name "Artem Timofeev"
 doom-font (font-spec :family "DejaVuSansM Nerd Font Mono" :size 15 :weight 'semi-light)
 doom-theme 'doom-one
 shell-file-name (executable-find "bash")                        ; use bash shell for internal needs
 display-line-numbers-type t                                     ; show line numbers
 mouse-drag-copy-region t                                        ; select-to-copy with mouse
 confirm-kill-emacs nil                                          ; quit without prompt
; company-global-modes '(not text-mode org-mode markdown-mode)    ; disable autocomplete for plain text
 scroll-margin 3                                                 ; add margin to cursor while scrolling
 projectile-project-search-path '("~/repos/")                    ;
 global-auto-revert-non-file-buffers t                           ; auto-update non-file buffers (e.g. Dired)
)
(global-auto-revert-mode 1)                                      ; auto-update changed files
(beacon-mode 1)                                                  ; cursor highlight on big movements or between windows
(pixel-scroll-precision-mode)                                    ; smooth scrolling
;(set-frame-parameter nil 'alpha-background 97)                   ; should add true transparency..
;(add-to-list 'default-frame-alist '(alpha-background . 97))

(global-set-key (kbd "C-M-<up>")   'mc/mark-previous-like-this)  ; spawn additional cursor above; C-g to exit
(global-set-key (kbd "C-M-<down>") 'mc/mark-next-like-this)      ; spawn additional cursor below
(unbind-key "<insertchar>" overwrite-mode)                       ; disable overwrite mode on Insert key
#+end_src

** Custom functions
#+begin_src elisp :exports none
;;; == CUSTOM FUNCTIONS ==
#+end_src

*** evil-ex-cmd
These commands go after =:=
#+begin_src elisp
(evil-define-command custom/write-and-sync (file &optional bang)
  "Write the current buffer and then execute doom sync."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (doom/reload))

(evil-define-command custom/write-and-quit (file &optional bang)
  "Write the current buffer and then kill buffer."
  :repeat nil
  (interactive "<f><!>")
  (evil-write nil nil nil file bang)
  (kill-current-buffer))

(evil-define-command custom/kill-buffer (&optional bang)
  "Kill buffer. With bang '!' - kill without prompt."
  :repeat nil
  (interactive "<!>")
  (if bang
      (progn
        (set-buffer-modified-p nil)))
  (kill-current-buffer))
#+end_src

*** Smarter backward-kill-word
#+begin_src elisp
(defun aborn/backward-kill-word ()
  "Customize/Smart backward-kill-word."
  (interactive)
  (let* ((cp (point))
         (backword)
         (end)
         (space-pos)
         (backword-char (if (bobp)
                            ""           ;; cursor in begin of buffer
                          (buffer-substring cp (- cp 1)))))
    (if (equal (length backword-char) (string-width backword-char))
        (progn
          (save-excursion
            (setq backword (buffer-substring (point) (progn (forward-word -1) (point)))))
          (setq ab/debug backword)
          (save-excursion
            (when (and backword          ;; when backword contains space
                       (s-contains? " " backword))
              (setq space-pos (ignore-errors (search-backward " ")))))
          (save-excursion
            (let* ((pos (ignore-errors (search-backward-regexp "\n")))
                   (substr (when pos (buffer-substring pos cp))))
              (when (or (and substr (s-blank? (s-trim substr)))
                        (s-contains? "\n" backword))
                (setq end pos))))
          (if end
              (kill-region cp end)
            (if space-pos
                (kill-region cp space-pos)
              (backward-kill-word 1))))
      (kill-region cp (- cp 1)))         ;; word is non-english word
    ))
#+end_src

*** Auto-tab-align comments
#+begin_src elisp
(defun custom/align-comments (beginning end)
  "Align comments within marked region.
Comment syntax detection is automatic"
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)" (regexp-quote comment-start))))
#+end_src

*** Paste image from clipboard
#+begin_src elisp
(defun custom/org-save-clipboard-image ()
  "Save clipboard image to {project-root}/img/{filename}.png
Automatically insert link to image relative from current document.
Depends on xclip for clipboard and ImageMagick for conversion to image."
  (interactive)
  (let* ((project-root (magit-toplevel))
         (folder-path (concat project-root "img/"))
         (image-name (read-string "Enter image name (*.png): "))
         (image-file (concat folder-path image-name ".png"))
         (exit-status nil))
    (unless (file-exists-p folder-path)
      (make-directory folder-path))
    (setq exit-status (call-process-shell-command (format "xclip -selection clipboard -t image/png -o > %s" image-file)))
    (if (= exit-status 0)
        (progn
          (let ((current-file (buffer-file-name)))
            (if current-file
                (let* ((relative-path (file-relative-name (expand-file-name image-file) (file-name-directory current-file)))
                       (image-link (format "[[file:%s]]" relative-path)))
                  (insert image-link)))))
      (message "Failed to save clipboard image."))))

#+end_src

*** MD to Org links
#+begin_src elisp
(defun custom/convert-md-links-to-org ()
  "Convert Markdown links to Org-mode links within the current selection."
  (interactive)
  (if (use-region-p)
      (let ((begin (region-beginning))
            (end (region-end)))
        (save-excursion
          (goto-char begin)
          (while (re-search-forward "\\[\\([^\[\]]+\\)\\](\\([^\[\]]+\\))" end t)
            (let ((new-end (- end (- (match-end 0) (match-beginning 0)))))
              (replace-match "[[\\2][\\1]]")
              (setq end new-end)))))
    (message "No region selected. Please select a region to convert.")))
#+end_src

*** Find subproject root
#+begin_src elisp
(defun custom/find-subproject-root (pattern)
  "Finds the subproject root upon checking the top occurrence of PATTERN going up from a current dir."
  (let* ((file-dir (file-name-directory (buffer-file-name)))
         (closest-root
          (locate-dominating-file file-dir
                                  (lambda (dir)
                                    (file-exists-p (expand-file-name pattern dir))))))
    closest-root)
  )
#+end_src

** Buffers
#+begin_src elisp
;;; == BUFFER KEYMAPS ==
(map! :leader
      (:prefix ("b". "buffer")
       :desc "New buffer"         "n"       #'evil-buffer-new
       :desc "Save buffer"        "s"       #'save-buffer
       :desc "Switch buffer"      "b"       #'consult-buffer
       :desc "Next buffer"        "<right>" #'next-buffer
       :desc "Previous buffer"    "<left>"  #'previous-buffer
       :desc "Kill buffer"        "d"       #'kill-current-buffer
       :desc "Kill other buffers" "k"       #'doom/kill-other-buffers
       :desc "Kill all buffers"   "K"       #'doom/kill-all-buffers))
#+end_src

** centaur-tabs
Add tabs to buffers
#+begin_src elisp
;;; == CENTAUR-TABS ==
(use-package! centaur-tabs
  :hook                                                      ; hide tabs in various modes
  (vterm-mode . centaur-tabs-local-mode)
  (dired-mode . centaur-tabs-local-mode)
  (pdf-view-mode . centaur-tabs-local-mode)
  :custom
  (centaur-tabs-height 13)                                   ; reduce tab height
  (centaur-tabs-set-close-button nil)                        ; remove close button
  :config                                                    ; hide tabs in various buffers
  (centaur-tabs-group-by-projectile-project)                 ; group tabs by projects
  (dolist (prefix '(                                         ; disable tabs for select buffer names
                    "*doom" "*Async-native" "*Native-compile" "*Messages" "*scratch"
                    "*Org" "*Ilist" "*org-roam" "*httpd"
                    "*compilation" "*pylsp" "*yamlls" "*bash-ls" "*jsts-ls" "*ansible-ls" "*json-ls"
                    ))
    (add-to-list 'centaur-tabs-excluded-prefixes prefix))
  (unbind-key "<tab-line> <mouse-1>" centaur-tabs-close-map) ; disable tab closing with LMB
  (define-key centaur-tabs-default-map
   (vector centaur-tabs-display-line 'mouse-2) 'centaur-tabs-do-select)
  )
;(map! :leader
;      "<left>" #'centaur-tabs-backward
;      "<right>" #'centaur-tabs-forward
;      "<up>" #'centaur-tabs-forward-group
;      "<down>" #'centaur-tabs-backward-group)
(map! "C-s-<left>" #'centaur-tabs-backward
      "C-s-<right>" #'centaur-tabs-forward
      "C-s-<up>" #'centaur-tabs-forward-group
      "C-s-<down>" #'centaur-tabs-backward-group)
#+end_src

** dired
Traverse and manage directories
#+begin_src elisp
;;; == DIRED ==
(use-package! dired
  :defer t
  :custom
  (dired-kill-when-opening-new-dired-buffer t)  ; stop creating buffers for each dir
  )
(evil-define-key 'normal dired-mode-map
  (kbd "DEL") 'dired-up-directory               ; move up dirs with Backspace
  )
#+end_src

** doom-modeline
Status bar module
#+begin_src elisp
;;; == DOOM-MODELINE ==
(use-package! doom-modeline
  :config
  (display-time-mode 1)        ; show time in modeline
  :custom
  (display-time-24hr-format t) ; show time in 24h format
  ;; disable modal icons and set custom evil-state tags to make them more noticeable
  (doom-modeline-modal-icon nil)
  (evil-normal-state-tag   (propertize "[Normal]"))
  (evil-emacs-state-tag    (propertize "[Emacs]" ))
  (evil-insert-state-tag   (propertize "[Insert]"))
  (evil-motion-state-tag   (propertize "[Motion]"))
  (evil-visual-state-tag   (propertize "[Visual]"))
  (evil-operator-state-tag (propertize "[Operator]"))
  )
;; setting up custom FG/BG colors to further increace visibility of evil-state
(defun setup-doom-modeline-evil-states ()
  (set-face-attribute 'doom-modeline-evil-normal-state   nil :background "lawngreen" :foreground "black")
  (set-face-attribute 'doom-modeline-evil-emacs-state    nil :background "orange"    :foreground "black")
  (set-face-attribute 'doom-modeline-evil-insert-state   nil :background "red2"      :foreground "white")
  (set-face-attribute 'doom-modeline-evil-motion-state   nil :background "blue"      :foreground "white")
  (set-face-attribute 'doom-modeline-evil-visual-state   nil :background "gray80"    :foreground "black")
  (set-face-attribute 'doom-modeline-evil-operator-state nil :background "blueviolet"))
(add-hook 'doom-modeline-mode-hook 'setup-doom-modeline-evil-states)
#+end_src

** elfeed
Module to read RSS feeds
#+begin_src elisp
;;; == ELFEED ==
(setq elfeed-goodies/entry-pane-size 0.5)
(setq elfeed-feeds  '(("https://www.reddit.com/r/linux.rss" reddit linux)
                     ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                     ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                     ("https://hackaday.com/blog/feed/" hackaday linux)
                     ("https://opensource.com/feed" opensource linux)
                     ("https://linux.softpedia.com/backend.xml" softpedia linux)
                     ("https://itsfoss.com/feed/" itsfoss linux)
                     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                     ("https://www.phoronix.com/rss.php" phoronix linux)
                     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                     ("https://www.computerworld.com/index.rss" computerworld linux)
                     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                     ("https://betanews.com/feed" betanews linux)
                     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                     ("http://highscalability.com/blog/rss.xml" highscal sysdes)
                     ("https://blog.acolyer.org/feed/" mornpaper sysdes)
                     ("https://www.infoq.com/architecture-design/rss" infoq sysdes)
                     ("https://dzone.com/devops-tutorials-tools-news/list.rss" dzone devops)
                     ("https://devops.com/feed/" devops)
                     ("https://thenewstack.io/feed/" newstack devops)
                     ("http://feeds.arstechnica.com/arstechnica/index" arstech tech)
                     ("https://techcrunch.com/feed/" techcrunch tech)))
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "S-<down>") 'elfeed-goodies/split-show-next
  (kbd "S-<up>") 'elfeed-goodies/split-show-prev)
#+end_src

** emacs TTY
Various hacks to make Emacs usable in TTY
#+begin_src elisp
;;; == EMACS TTY ==
(unless (display-graphic-p)
  (xterm-mouse-mode 1)                               ; enable mouse in TTY mode
  (setq lsp-headerline-breadcrumb-icons-enable nil)  ; these icons are PNG
;;  (map! :after evil-org                            ; TTY resolves 'C-backspace' into 'C-h'
;;        :map evil-org-mode-map                     ; if your terminal does not support it
;;        :i "C-h" nil)                              ; enable these lines for hack. define-key too ↴
;;  (define-key evil-insert-state-map (kbd "C-h") 'aborn/backward-kill-word)
)
#+end_src

** evil
Evil mode and general movement
#+begin_src elisp
;;; == EVIL MODE ==
;(define-key evil-motion-state-map ";" #'evil-ex)                                    ; swap : and ;
;(define-key evil-motion-state-map ":" #'evil-snipe-repeat)
(setq evil-want-fine-undo t)                                                         ; undo in small steps
(global-set-key          (kbd "C-<backspace>")     'aborn/backward-kill-word)        ; smarter C-backspace
(define-key evil-ex-completion-map (kbd "C-v")     'evil-paste-after)                ; C-v to paste
(define-key evil-ex-search-keymap  (kbd "C-v")     'evil-paste-after)
(define-key evil-normal-state-map  (kbd "C-v")     'evil-paste-after)
(define-key evil-insert-state-map  (kbd "C-v")     'yank)
(define-key evil-emacs-state-map   (kbd "C-v")     'evil-paste-after)
(define-key evil-insert-state-map  (kbd "C-y")     'evil-yank)                       ; C-y to copy in Insert state
(define-key evil-insert-state-map  (kbd "C-u")     'evil-undo)                       ; C-u to undo in Insert state
(define-key evil-insert-state-map  (kbd "C-r")     'evil-redo)                       ; C-u to undo in Insert state
(define-key global-map             [home]          'mwim-beginning-of-code-or-line)  ; go to line beginning or to identation
(define-key evil-motion-state-map  [home]          'mwim-beginning-of-code-or-line)
(define-key global-map             [end]           'mwim-end)                        ; go to end of code or end of line
(define-key evil-motion-state-map  [end]           'mwim-end)
(global-set-key                    (kbd "<prior>") 'evil-scroll-up)                  ; rebind PgUp/PgDn to evil scroll functions
(global-set-key                    (kbd "<next>")  'evil-scroll-down)

;; these commands go after ':' (evil-ex)
(evil-ex-define-cmd "W"  'evil-write)                                      ; write with sticky shift
(evil-ex-define-cmd "ww" 'custom/write-and-sync)                           ; write file and perform 'doom sync'
(evil-ex-define-cmd "wq" 'custom/write-and-quit)                           ; write file and kill buffer
(evil-ex-define-cmd "q"  'custom/kill-buffer)                              ; kill buffer instead of killing emacs; :q! - kill without prompt
#+end_src

** expand-region
Extension to increase selected region by semantic units
Todo: figure out working and convenient keybind
#+begin_src elisp :tangle no
;;; == EXPAND-REGION ==
(map! "C-=" #'er/expand-region
      "C--" #'er/contract-region)
#+end_src

** flycheck
*** Main configuration
On the fly syntax checking
#+begin_src elisp
;;; == FLYCHECK ==
(use-package! flycheck
  :defer t
  :custom
  (flycheck-relevant-error-other-file-minimum-level nil)  ; show errors from all related files
  (flycheck-dockerfile-hadolint-executable "~/.config/doom/scripts/hadolint-container.sh")
  (flycheck-markdown-markdownlint-cli-executable "~/.config/doom/scripts/markdownlintcli-container.sh")
  (flycheck-markdown-markdownlint-cli-config "~/.config/doom/.markdownlint.yaml")
  (flycheck-sh-shellcheck-executable "~/.config/doom/scripts/shellcheck-container.sh")
  :config
  (flycheck-add-next-checker 'markdown-markdownlint-cli 'textlint)
  (flycheck-add-next-checker 'textlint 'proselint)
  ;(flycheck-display-errors-funct ion #'flycheck-display-error-messages-unless-error-list) ; i need reverse of this
  )
(setq tflint-custom-config "~/.config/doom/.tflint.hcl")
(add-hook 'lsp-managed-mode-hook (lambda ()                     ; setup checkers chaining with LSP
    (when (derived-mode-p 'dockerfile-mode)(flycheck-add-next-checker 'lsp 'dockerfile-hadolint))
    (when (derived-mode-p 'sh-mode)        (flycheck-add-next-checker 'lsp 'sh-bash))  ; next one is sh-shellcheck
    ))
#+end_src

*** dockerfile-hadolint
Runs from container. No configurable options
#+begin_src sh :tangle ~/.config/doom/scripts/hadolint-container.sh :shebang #!/bin/bash
docker run --rm -i hadolint/hadolint hadolint --no-color /dev/stdin <&0
#+end_src

*** markdownlint-cli
Runs from container. Accepts flycheck-configured options: config file
#+begin_src shhh :tangle ~/.config/doom/scripts//markdownlintcli-container.sh :shebang #!/bin/bash
arg_count="$#"
if [ "$arg_count" -eq 1 ]; then
    path="$1"
    filename=$(basename "$1")
    docker run --rm -i -v $path:/workdir/$filename ghcr.io/igorshubovych/markdownlint-cli:latest $filename
elif [ "$arg_count" -eq 3 ] && [ "$1" == "--config" ]; then
    path="$3"
    filename=$(basename "$3")
    confpath="$2"
    docker run --rm -i -v $path:/workdir/$filename -v $confpath:/conf.yml ghcr.io/igorshubovych/markdownlint-cli:latest --config /conf.yml $filename
fi
#+end_src

#+begin_src yaml :tangle ~/.config/doom/.markdownlint.yaml
default: true
MD013: false  # ignore line-length
MD033: false  # ignore no-inline-html
MD041: false  # ignore first-line-heading
#+end_src

*** shellcheck
Runs from container. Accepts flycheck-configured options: flycheck-shellcheck-follow-sources (t/nil)
#+begin_src shhh :tangle ~/.config/doom/scripts/shellcheck-container.sh :shebang #!/bin/bash
docker run --rm -i koalaman/shellcheck:stable "$@" <&0
#+end_src

*** tflint
Runs from container
- Requirements ::
  - Image build: install plugins
  - Custom flycheck checker: mainline flycheck no longer supports latest tflint

- Build image ::
#+begin_src hcl :tangle ~/.config/doom/.tflint.hcl
plugin "terraform" {
  enabled = true
  preset = "all"
}
plugin "aws" {
    enabled = true
    version = "0.27.0"
    source  = "github.com/terraform-linters/tflint-ruleset-aws"
}
/*
plugin "aws-serverless" {
  enabled = true
  version = "0.3.2"
  source = "github.com/awslabs/serverless-rules"
}
,*/
#+end_src

#+begin_src dockerfile :tangle ~/.config/doom/Dockerfile
FROM ghcr.io/terraform-linters/tflint

COPY .tflint.hcl /data

RUN tflint --init
#+end_src

#+begin_src sh :tangle no
cd ~/.config/doom/
docker build . -t tflint-plugins
docker run --rm -i tflint-plugins -v
#+end_src

#+RESULTS:
| TFLint | version           | 0.48.0          |
| +      | ruleset.terraform | (0.4.0-bundled) |
| +      | ruleset.aws       | (0.27.0)        |

- Setup checker ::
#+begin_src elisp
(flycheck-define-checker terraform-tflint-custom
  "A custom Terraform checker using tflint.

See URL `https://github.com/wata727/tflint'."
  :command ("docker" "run" "--rm" "-i"
            "-v" (eval (concat (expand-file-name (custom/find-subproject-root "main.tf")) ":/data"))
            "-v" (eval (concat (expand-file-name tflint-custom-config) ":/.tflint.hcl"))
            "tflint-plugins" "--format=compact" "--config=/.tflint.hcl")
  :error-patterns
  ((info line-start   (optional (file-name)) ":" line ":" column ": notice - "  (message) line-end)
  (warning line-start (optional (file-name)) ":" line ":" column ": warning - " (message) line-end)
  (error line-start   (optional (file-name)) ":" line ":" column ": error - "   (message) line-end))
  :modes terraform-mode
  :next-checkers (terraform))
(add-to-list 'flycheck-checkers 'terraform-tflint-custom)
#+end_src

** gptel
ChatGPT in Emacs
#+begin_src elisp
;;; == GPTEL ==
(defvar openai-api-key nil "Variable to hold OpenAI API key.")
(defun read-openai-api-key ()
  "Read API key from file and set `openai-api-key`."
  (with-temp-buffer
    (insert-file-contents "~/repos/dotfiles/doom/api.key")
    (setq openai-api-key (string-trim (buffer-string)))))

(use-package! gptel
  :defer t
  :init
  (read-openai-api-key)
  :custom
  (gptel-api-key openai-api-key)
  (gptel-default-mode 'org-mode)
  (gptel-model "gpt-4")
  )
#+end_src

** highlight-indent-guides
#+begin_src elisp
;;; == HIGHLIGHT-INDENT-GUIDES ==
(use-package! highlight-indent-guides
  :disabled t
  :defer t
  :custom
  (highlight-indent-guides-auto-odd-face-perc 0)
  (highlight-indent-guides-auto-even-face-perc 0)
  :config
  (highlight-indent-guides-auto-set-faces) ; FIXME indent glitches (not working)
  )
#+end_src

** imenu-list
Module to show file definitions or headings
#+begin_src elisp
;;; == IMENU-LIST ==
(use-package! imenu-list
  :defer t
  :custom
  (imenu-list-focus-after-activation t)    ; window auto-focus
  (imenu-list-auto-resize t)               ; windown auto-size (is it working?)
  (imenu-auto-rescan t)                    ; auto-refresh
  (imenu-auto-rescan-maxout (* 1024 1024)) ; limit auto-refresh to max filesize
  )
(map! :leader :desc "imenu-list" "t i" #'imenu-list-smart-toggle)
#+end_src

** indent-bars
Faster =indent-highlight-guides=
#+begin_src elisp
;;; == INDENT-BARS ==
(use-package! indent-bars
  :disabled t
  :defer t
  :hook
  (prog-mode . indent-bars-mode)
  :custom ; Minimal colorpop theme
  (indent-bars-color '(highlight :face-bg t :blend 0.15))
  (indent-bars-pattern ".")
  (indent-bars-width-frac 0.1)
  (indent-bars-pad-frac 0.1)
  (indent-bars-zigzag nil)
  (indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1)) ; blend=1: blend with BG only
  (indent-bars-highlight-current-depth '(:blend 0.5)) ; pump up the BG blend on current
  (indent-bars-display-on-blank-lines t)
  (indent-bars-treesit-support t) ; treesitter integration
  (indent-bars-no-descend-string t)
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-wrap '((python argument_list parameters
                               identifier keyword_argument block
                               list list_comprehension
                               dictionary dictionary_comprehension
                               parenthesized_expression subscript)))
  )
#+end_src

** kubel
Control Kubernetes
#+begin_src elisp
;;; == KUBEL ==
(use-package! kubel
  :defer t
  :after vterm
  :config
  (kubel-vterm-setup)
  )
(use-package! kubel-evil
  :after kubel)
#+end_src

** lsp
Language servers for code suggestions, highlighting and errors
#+begin_src elisp
;;; == LSP ==
(use-package! lsp-mode
  :defer t
  :custom
  (gc-cons-threshold (* 400 1024 1024))      ; increase GC threshold to improve perf in LSP mode
  (read-process-output-max (* 1 1024 1024))  ; handle large LSP responses
  )
(use-package! lsp-treemacs
  :after lsp-mode  ;; and treemacs
  :config
  (lsp-treemacs-sync-mode 1)
  )
#+end_src

** org-mode
- org :: Highly flexible structured plain text file format
#+begin_src elisp
;;; == ORG-MODE ==
(use-package! org
  :defer t
  :custom
  (org-directory "~/org")                                     ; org-agenda and other org tools will work upon this dir
  (org-support-shift-select t)                                ; enable select with S-<arrows>
  (org-startup-folded "content")                              ; startup with everything unfolded except lowest sub-sections
  (help-at-pt-display-when-idle t)                            ; show tooltips on links
  (help-at-pt-timer-delay 0.3)                                ; smaller delay before tooltips
  :config
  (set-popup-rule! "^\\*Org Src" :ignore t)                   ; delete popup rule for src-edit buffer
  :hook                                                       ; ^ makes popup on side instead of bottom
  (after-save . org-babel-tangle)                             ; export org code blocks on save
  (org-src-mode . evil-insert-state)                          ; enter code block editing with insert mode
  (org-mode . (lambda ()
    (flycheck-mode 0)                                         ; disable flycheck-mode
    (display-line-numbers-mode 0)                             ; disable lines numbers for org-mode
    (highlight-regexp ":tangle no" 'error)                    ; highlight :tangle no
    (map! :leader "TAB" #'org-fold-show-subtree)              ; unfold subsections on SPC-TAB
    ;(sp-local-pair 'org-mode "=" "=" :unless '(sp-point-before-word-p sp-point-before-same-p)) ; auto-pair = and ~
    (sp-local-pair 'org-mode "~" "~" :unless'(sp-point-before-word-p sp-point-before-same-p))
    ))
  )
(defun org-dblock-write:cover-letter (params)                 ; dynamic block to generate CL
  (let* ((position (plist-get params :position))
         (company (plist-get params :company))
         (template (with-temp-buffer
                     (insert-file-contents "~/org/templates/cover-letter.org")
                     (buffer-string))))
    (setq template (replace-regexp-in-string "%position%" position template))
    (setq template (replace-regexp-in-string "%company%" company template))
    (insert template)))
#+end_src

- org-roam :: Plain-text knowledge management system
#+begin_src elisp
;;; == ORG-ROAM ==
(use-package! org-roam
  :defer t
  :init
  (map! :leader :desc "org-roam backlinks" "t o" #'org-roam-buffer-toggle)
  :config
  (setq org-roam-directory org-directory ; org-dir = org-roam-dir
        org-roam-index-file (concat org-directory "README.org") ; org-roam main file
        ;org-template-dir (concat org-directory "templates/") ; templates dir for org-roam nodes
        org-roam-capture-templates
        '(("d" "default-uncat" plain "* Overview\n%?"
           :target (file+head "uncat/${slug}.org" "#+title: ${title}\n#+filetags: uncat\n")
           :unnarrowed t)
          ("t" "tech" plain "* Overview\n%?"
           :target (file+head "tech/${slug}.org" "#+title: ${title}\n#+filetags: tech\n")
           :unnarrowed t)
          ("s" "stash" plain "* Overview\n%?"
           :target (file+head "stash/${slug}.org" "#+title: ${title}\n#+filetags: stash\n")
           :unnarrowed t)
          ("m" "money" plain "* Overview\n%?"
           :target (file+head "money/${slug}.org" "#+title: ${title}\n#+filetags: money\n")
           :unnarrowed t)
          ("w" "work" plain "* Overview\n%?"
           :target (file+head "work/${slug}.org" "#+title: ${title}\n#+filetags: work\n")
           :unnarrowed t)
          ("h" "health" plain "* Overview\n%?"
           :target (file+head "health/${slug}.org" "#+title: ${title}\n#+filetags: health\n")
           :unnarrowed t)
          ("l" "leisure" plain "* Overview\n%?"
           :target (file+head "leisure/${slug}.org" "#+title: ${title}\n#+filetags: leisure\n")
           :unnarrowed t)
          )
        )
  )
(use-package! org-roam-timestamps
  :after org-roam
  :config
  (org-roam-timestamps-mode 1)
  )
#+end_src

- org-roam-ui :: Interactive web UI for =org-roam=
#+begin_src elisp
;;; == ORG ROAM UI ==
(use-package! org-roam-ui
    :after org-roam
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t)
    ; TODO: write comments for custom options
    )
#+end_src

** prog-mode
Settings for coding modes, such as =Python-mode=, =c-mode=, etc..
#+begin_src elisp
;;; ==PROG-MODE==
(add-hook 'prog-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'delete-trailing-whitespace nil t) ; remove whitespace on save
            (rainbow-delimiters-mode)                                      ; enable colored delimiters ([{
            )
          )
#+end_src

** treemacs
Module for displaying project file tree
#+begin_src elisp
;;; == TREEMACS ==
(use-package! treemacs
  :init
  (map! :leader :desc "treemacs" "t t" #'treemacs)
  :custom
  (treemacs-width 28)              ; adjust window width
  :config
  (treemacs-follow-mode 1)         ; follow files
  (treemacs-project-follow-mode 1) ; follow projects
)
#+end_src

** vterm
Terminal inside Emacs
#+begin_src elisp
;;; == VTERM ==
(use-package! vterm
  :defer t
  :config
  (setq-default vterm-shell (executable-find "fish"))             ; set fish shell as default
  )
(map! :leader
       :desc "vterm popup"              "t s"     #'+vterm/toggle  ; open popup
       :desc "vterm window"             "t S"     #'+vterm/here    ; open in current window
       )
#+end_src

** Windows
Manage Emacs windows
#+begin_src elisp
;;; == EVIL-WINDOWS KEYMAPS ==
(map! :leader
      (:prefix ("w". "window")
       :desc "New window, up"           "n"             #'evil-window-new
       :desc "New window, left"         "N"             #'evil-window-vnew

       :desc "Split view, right"        "s"             #'evil-window-split
       :desc "Split view, down"         "v"             #'evil-window-vsplit

       :desc "Select LEFT window"       "<left>"        #'evil-window-left
       :desc "Select DOWN window"       "<down>"        #'evil-window-down
       :desc "Select UP window"         "<up>"          #'evil-window-up
       :desc "Select RIGHT window"      "<right>"       #'evil-window-right

       :desc "Move window LEFT"         "S-<left>"      #'+evil/window-move-left
       :desc "Move window DOWN"         "S-<down>"      #'+evil/window-move-down
       :desc "Move window UP"           "S-<up>"        #'+evil/window-move-up
       :desc "Move window RIGHT"        "S-<right>"     #'+evil/window-move-right

       :desc "Maximize window"          "m m"           #'doom/window-maximize-buffer
       :desc "Maximize vertically"      "m v"           #'doom/window-maximize-vertically
       :desc "Maximize horizontally"    "m s"           #'doom/window-maximize-horizontally

       :desc "Close window"             "c"             #'evil-window-delete
       :desc "Kill buffer & window"     "d"             #'kill-buffer-and-window))
#+end_src

** Whiteroom-mode
#+begin_src elisp
;;; == WHITEROOM-MODE ==
(after! writeroom-mode
  (add-hook! 'writeroom-mode-enable-hook
    (centaur-tabs-mode -1)
    (git-gutter-mode -1)
    (company-mode -1)
    )

  (add-hook! 'writeroom-mode-disable-hook
    (centaur-tabs-mode 1)
    (git-gutter-mode 1)
    (company-mode 1)
    )
  )
#+end_src

* packages.el
Additional packages from emacs repos
#+begin_src elisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! beacon)              ; cursor highlighting
(package! imenu-list)          ; listing of file structure
(package! mwim)                ; ident/comment-aware cursor movements with <home>/<end>
(package! org-roam-timestamps) ; +c/mtime to PROPERTIES drawer in org-roam file
(package! org-roam-ui)         ; web ui for org-roam
(package! expand-region)       ; increase selected region by semantic units
(unpin! lsp-treemacs)          ; fix lsp-headerline-breadcrumb icons (???why)
(package! indent-bars          ; better and faster indentation (still broken in 29.0 GTK)
  :recipe (:host github :repo "jdtsmith/indent-bars"))
(package! kubel-evil)          ; control k8s, with evil KB
(package! gptel)               ; chatgpt interface via API
(package! gptel-extensions     ; extended functionality
  :recipe (:host github :repo "kamushadenes/gptel-extensions.el"
                 :files ("gptel-extensions.el")))
(package! jenkinsfile-mode)
#+end_src

* Notes
** Tasks
*** general tasks
- Try out different indent guides ~highlight-indent-guides-method~
    =fill=, =column=, =character= (current) or =bitmap=
- Enable and setup [[https://www.emacswiki.org/emacs/SmoothScrolling][smooth scrolling]]
- Exclude some things from =file-name-history=
- M mouse-1 :: create additional cursors

*** code tasks
- configure =quickrun= to effortlessly launch code and tools (i.e. such as docker)
  - find a way to interactively refresh code output for rapid prototyping
- global symbol search (find stuff in a whole project with dependencies)
- auto rename tag :: effortlessly rename your <picture>pic</picture> op/close tags
- gitlens :: show who is responsible for current line. and when
- Install ~LSP~ for =Terraform=
- Move most LSPs and Linters to containers
- TFLint ::
  - Fix directory select. Should be the topmost one with a =main.tf= in a project

*** org-mode tasks
- Org unfold sections in insert mode
  - Insert mode: TAB on closed section should open it
- org-scr-mode :: Exit with =:q= or =:w= (if no filename was provided)
- Try to customize =org-fancy-priorities=
- Wrapper for clipboard paste to automatically detect images and launch =custom/org-save-clipboard-image=
- org dwim :: open images in new buffer if they can't fit in a window view

*** to disable
- disable =evil-record-macro= =q= and other related commands
- probably bookmarks too?

** Issues
- doom/reload :: Can't use new modules without restart of emacs
- Emojis :: Visual glitches in terminal TTY mode
- RET in middle of org list item :: Invalid function: org-element-with-disabled-cache
- TAB in org code block throwing ::
    [yas] Check your `yas-snippet-dirs': /home/atimofeev/.config/doom/snippets/ is not a directory
    [yas] Preparied just-in-time loading of snippets with some errors.  Check *Messages*.
- highlight-indent-guides :: visual bugs
    https://github.com/doomemacs/doomemacs/issues/2666
- indent-bars :: stipple draw bug in emacs 29, must be fixed somewhere in master branch (30+)
    https://github.com/jdtsmith/indent-bars/issues/3
  - Also need to fix python line breaks highlighting
- GUI mode :: stuttery scrolling even with =smooth scrolling=
- Centaur-tabs :: org-roam weird keybind behavior:
  1. Disable <mouse-1> tab closing
  2. <mouse-1> click a roam link, it opens a new tab
  3. <mouse-1> click on original tab, it goes to original tab
  4. from original tab <mouse-1> click on second roam tab, it get recognized as <mouse-2> and closes tab.
     - When you unbind ~centaur-tabs-do-close~ from both ~centaur-tabs-close-map~ (mouse-1 and mouse-2), and ~centaur-tabs-default-map~ (mouse-2), in reproduced scenario you can't go to second roam tab with <mouse-1>, it says =<tab-line> <mouse-2> is undefined=.
- Overscroll :: Currently no solution found to control or prevent buffer overscroll

** Code to implement
*** Centaur-Tabs
**** Hide tabs menu if 1 tab
https://github.com/ema2159/centaur-tabs/issues/52
#+begin_src elisp :tangle no
(use-package shut-up)

;; it is possible that 0 is returned which can be ignored
(defun centaur-tabs-get-total-tab-length ()
  (length (centaur-tabs-tabs (centaur-tabs-current-tabset))))

(defun centaur-tabs-hide-on-window-change ()
  ;; run-at-time is required so the tab length is correct on killing a buffer
  ;; without it, it still returns the old value
  (run-at-time nil nil
               (lambda ()
                 (centaur-tabs-hide-check (centaur-tabs-get-total-tab-length)))))

(defun centaur-tabs-hide-check (len)
  (shut-up
    (cond
     ((and (= len 1) (not (centaur-tabs-local-mode))) (call-interactively #'centaur-tabs-local-mode))
     ((and (>= len 2) (centaur-tabs-local-mode)) (call-interactively #'centaur-tabs-local-mode)))))

(use-package centaur-tabs
  :config
  (centaur-tabs-mode t)
  (add-hook 'window-configuration-change-hook 'centaur-tabs-hide-on-window-change))
#+end_src

*** Auto indent code block
Run every 10s
#+begin_src elisp :tangle no
(defun indent-org-block-automatically ()
  (when (org-in-src-block-p)
   (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit)))

(run-at-time 1 10 'indent-org-block-automatically)
#+end_src

** Useful links
https://discourse.doomemacs.org/t/how-to-re-bind-keys/56
https://discourse.doomemacs.org/t/common-config-anti-patterns/119
https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org
https://github.com/tecosaur/emacs-config/blob/master/config.org
https://github.com/elken/doom
https://github.com/ztlevi/doom-config
https://dotdoom.rgoswami.me/
https://gitlab.com/manueljlin/emacs-config/
https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
https://github.com/stfl/doom.d/blob/master/config.org
https://emacs.stackexchange.com/questions/19578/list-hooks-that-will-run-after-command
https://stackoverflow.com/questions/34497696/swap-and-to-make-colon-commands-easier-to-type-in-emacs
https://github.com/larstvei/dot-emacs
https://github.com/Remedan/dotfiles
https://github.com/rolandtritsch/emacs.d/blob/trunk/roland/30-general-coding.org
https://github.com/ndrvtl/emacs-pgtk
https://github.com/bbatsov/emacs-lisp-style-guide
